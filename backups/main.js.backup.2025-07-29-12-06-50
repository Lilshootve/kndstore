// KND Store - Main JavaScript Optimizado

// Configuración de Particles.js optimizada
const particlesConfig = {
    particles: {
        number: {
            value: 60, // Reducido para mejor rendimiento
            density: {
                enable: true,
                value_area: 800
            }
        },
        color: {
            value: ["#00bfff", "#8a2be2", "#00d4ff"]
        },
        shape: {
            type: "circle",
            stroke: {
                width: 0,
                color: "#000000"
            }
        },
        opacity: {
            value: 0.5,
            random: false,
            anim: {
                enable: false,
                speed: 1,
                opacity_min: 0.1,
                sync: false
            }
        },
        size: {
            value: 3,
            random: true,
            anim: {
                enable: false,
                speed: 40,
                size_min: 0.1,
                sync: false
            }
        },
        line_linked: {
            enable: true,
            distance: 150,
            color: "#00bfff",
            opacity: 0.4,
            width: 1
        },
        move: {
            enable: true,
            speed: 4, // Reducido para mejor rendimiento
            direction: "none",
            random: false,
            straight: false,
            out_mode: "out",
            bounce: false,
            attract: {
                enable: false,
                rotateX: 600,
                rotateY: 1200
            }
        }
    },
    interactivity: {
        detect_on: "canvas",
        events: {
            onhover: {
                enable: true,
                mode: "repulse"
            },
            onclick: {
                enable: true,
                mode: "push"
            },
            resize: true
        },
        modes: {
            grab: {
                distance: 400,
                line_linked: {
                    opacity: 1
                }
            },
            bubble: {
                distance: 400,
                size: 40,
                duration: 2,
                opacity: 8,
                speed: 3
            },
            repulse: {
                distance: 200,
                duration: 0.4
            },
            push: {
                particles_nb: 4
            },
            remove: {
                particles_nb: 2
            }
        }
    },
    retina_detect: true
};

// Inicialización de Particles.js
if (typeof particlesJS !== 'undefined') {
    particlesJS("particles-bg", particlesConfig);
}

// Configuración de animaciones optimizada
const animationConfig = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
};

// Observer para animaciones de scroll optimizado
const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.classList.add('animate');
            observer.unobserve(entry.target); // Dejar de observar después de animar
        }
    });
}, animationConfig);

// Función optimizada para inicializar animaciones de scroll
function initScrollAnimations() {
    const elements = document.querySelectorAll('.feature-card, .product-card, .value-card, .team-card, .tech-card, .future-card, .contact-card, .hours-card');
    
    elements.forEach(element => {
        observer.observe(element);
    });
}

// Función optimizada para el formulario de contacto
function initContactForm() {
    const form = document.querySelector('.contact-form');
    if (!form) return;

    const submitBtn = form.querySelector('.galactic-btn');
    const fields = form.querySelectorAll('.galactic-input, .galactic-textarea');

    // Validación en tiempo real optimizada
    fields.forEach(field => {
        field.addEventListener('blur', () => validateField(field));
        field.addEventListener('input', () => {
            if (field.classList.contains('is-invalid')) {
                validateField(field);
            }
        });
    });

    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        if (submitBtn.classList.contains('loading')) return;
        
        // Validar todos los campos
        let isValid = true;
        fields.forEach(field => {
            if (!validateField(field)) {
                isValid = false;
            }
        });

        if (!isValid) return;

        // Mostrar estado de carga
        submitBtn.classList.add('loading');
        submitBtn.disabled = true;

        try {
            // Simular envío (reemplazar con llamada real a API)
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            showAlert('¡Mensaje enviado con éxito! Te contactaremos pronto.', 'success');
            form.reset();
            
        } catch (error) {
            showAlert('Error al enviar el mensaje. Inténtalo de nuevo.', 'danger');
        } finally {
            submitBtn.classList.remove('loading');
            submitBtn.disabled = false;
        }
    });
}

// Función optimizada para validación de campos
function validateField(field) {
    const value = field.value.trim();
    const fieldName = field.name;
    const feedback = field.parentNode.querySelector('.invalid-feedback');
    
    // Limpiar estados previos
    field.classList.remove('is-valid', 'is-invalid');
    if (feedback) feedback.style.display = 'none';

    // Validaciones específicas
    let isValid = true;
    let errorMessage = '';

    switch (fieldName) {
        case 'nombre':
            if (value.length < 2) {
                isValid = false;
                errorMessage = 'El nombre debe tener al menos 2 caracteres';
            }
            break;
            
        case 'email':
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(value)) {
                isValid = false;
                errorMessage = 'Ingresa un email válido';
            }
            break;
            
        case 'telefono':
            const phoneRegex = /^[\d\s\-\+\(\)]+$/;
            if (value && !phoneRegex.test(value)) {
                isValid = false;
                errorMessage = 'Ingresa un teléfono válido';
            }
            break;
            
        case 'mensaje':
            if (value.length < 10) {
                isValid = false;
                errorMessage = 'El mensaje debe tener al menos 10 caracteres';
            }
            break;
    }

    // Aplicar resultado de validación
    if (isValid) {
        field.classList.add('is-valid');
    } else {
        field.classList.add('is-invalid');
        if (feedback) {
            feedback.textContent = errorMessage;
            feedback.style.display = 'block';
        }
    }

    return isValid;
}

// Función optimizada para mostrar alertas
function showAlert(message, type = 'info') {
    const alertContainer = document.querySelector('.alert-container') || createAlertContainer();
    
    const alert = document.createElement('div');
    alert.className = `galactic-alert alert-${type}`;
    alert.innerHTML = `
        <div class="d-flex align-items-center">
            <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'danger' ? 'exclamation-triangle' : 'info-circle'} me-2"></i>
            <span>${message}</span>
        </div>
        <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>
    `;
    
    alertContainer.appendChild(alert);
    
    // Auto-remover después de 5 segundos
    setTimeout(() => {
        if (alert.parentElement) {
            alert.remove();
        }
    }, 5000);
}

// Función para crear contenedor de alertas
function createAlertContainer() {
    const container = document.createElement('div');
    container.className = 'alert-container position-fixed top-0 end-0 p-3';
    container.style.zIndex = '9999';
    document.body.appendChild(container);
    return container;
}

// Función optimizada para revelar elementos en scroll
function revealOnScroll() {
    const elements = document.querySelectorAll('.about-section, .value-card, .team-card, .tech-card, .future-card');
    
    elements.forEach(element => {
        const elementTop = element.getBoundingClientRect().top;
        const elementVisible = 150;
        
        if (elementTop < window.innerHeight - elementVisible) {
            element.classList.add('animate');
        }
    });
}

// Panel de colores optimizado
function initColorPanel() {
    const toggle = document.querySelector('.color-panel-toggle');
    const sidebar = document.querySelector('.color-panel-sidebar');
    const overlay = document.querySelector('.color-panel-overlay');
    
    if (!toggle || !sidebar) return;

    // Toggle panel
    toggle.addEventListener('click', () => {
        sidebar.classList.toggle('open');
        overlay.classList.toggle('active');
        toggle.classList.toggle('active');
    });

    // Cerrar con overlay
    if (overlay) {
        overlay.addEventListener('click', () => {
            sidebar.classList.remove('open');
            overlay.classList.remove('active');
            toggle.classList.remove('active');
        });
    }

    // Temas de colores
    const themes = document.querySelectorAll('.color-theme');
    themes.forEach(theme => {
        theme.addEventListener('click', () => {
            const themeName = theme.dataset.theme;
            applyColorTheme(themeName);
            
            // Actualizar estado activo
            themes.forEach(t => t.classList.remove('active'));
            theme.classList.add('active');
        });
    });
}

// Función optimizada para aplicar temas de colores
function applyColorTheme(themeName) {
    const root = document.documentElement;
    
    const themes = {
        'default': {
            '--knd-neon-blue': '#00bfff',
            '--knd-electric-purple': '#8a2be2',
            '--knd-accent-cyan': '#00d4ff'
        },
        'green': {
            '--knd-neon-blue': '#00ff00',
            '--knd-electric-purple': '#32cd32',
            '--knd-accent-cyan': '#90ee90'
        },
        'red': {
            '--knd-neon-blue': '#ff0000',
            '--knd-electric-purple': '#dc143c',
            '--knd-accent-cyan': '#ff6347'
        },
        'orange': {
            '--knd-neon-blue': '#ff8c00',
            '--knd-electric-purple': '#ff4500',
            '--knd-accent-cyan': '#ffa500'
        },
        'pink': {
            '--knd-neon-blue': '#ff69b4',
            '--knd-electric-purple': '#ff1493',
            '--knd-accent-cyan': '#ffb6c1'
        }
    };
    
    const theme = themes[themeName] || themes.default;
    
    Object.entries(theme).forEach(([property, value]) => {
        root.style.setProperty(property, value);
    });
    
    // Guardar preferencia
    localStorage.setItem('knd-theme', themeName);
}

// Función para cargar tema guardado
function loadSavedTheme() {
    const savedTheme = localStorage.getItem('knd-theme');
    if (savedTheme) {
        applyColorTheme(savedTheme);
        
        // Marcar tema activo
        const activeTheme = document.querySelector(`[data-theme="${savedTheme}"]`);
        if (activeTheme) {
            activeTheme.classList.add('active');
        }
    }
}

// Función optimizada para FAQ
function initFAQ() {
    const faqItems = document.querySelectorAll('.faq-item');
    
    faqItems.forEach(item => {
        const question = item.querySelector('.faq-question');
        const answer = item.querySelector('.faq-answer');
        
        if (question && answer) {
            question.addEventListener('click', () => {
                const isOpen = item.classList.contains('active');
                
                // Cerrar todos los items
                faqItems.forEach(otherItem => {
                    otherItem.classList.remove('active');
                    const otherAnswer = otherItem.querySelector('.faq-answer');
                    if (otherAnswer) {
                        otherAnswer.style.maxHeight = '0px';
                    }
                });
                
                // Abrir item actual si no estaba abierto
                if (!isOpen) {
                    item.classList.add('active');
                    answer.style.maxHeight = answer.scrollHeight + 'px';
                }
            });
        }
    });
}

// Función optimizada para búsqueda de productos
function initProductSearch() {
    const searchInput = document.querySelector('.search-box input');
    const categorySelect = document.querySelector('.category-filter');
    const productCards = document.querySelectorAll('.product-card');
    
    if (!searchInput) return;
    
    function filterProducts() {
        const searchTerm = searchInput.value.toLowerCase();
        const selectedCategory = categorySelect ? categorySelect.value : '';
        
        productCards.forEach(card => {
            const title = card.querySelector('h3').textContent.toLowerCase();
            const description = card.querySelector('p').textContent.toLowerCase();
            const category = card.dataset.category || '';
            
            const matchesSearch = title.includes(searchTerm) || description.includes(searchTerm);
            const matchesCategory = !selectedCategory || category === selectedCategory;
            
            if (matchesSearch && matchesCategory) {
                card.style.display = 'block';
                card.style.animation = 'fadeInUp 0.5s ease-out';
            } else {
                card.style.display = 'none';
            }
        });
    }
    
    // Debounce para optimizar búsqueda
    let searchTimeout;
    searchInput.addEventListener('input', () => {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(filterProducts, 300);
    });
    
    if (categorySelect) {
        categorySelect.addEventListener('change', filterProducts);
    }
}

// Función para optimizar imágenes
function optimizeImages() {
    const images = document.querySelectorAll('img[data-src]');
    
    const imageObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const img = entry.target;
                img.src = img.dataset.src;
                img.classList.remove('lazy');
                imageObserver.unobserve(img);
            }
        });
    });
    
    images.forEach(img => imageObserver.observe(img));
}

// Función para precargar recursos críticos
function preloadCriticalResources() {
    const criticalResources = [
        '/assets/css/style.css',
        '/assets/js/main.js',
        '/assets/images/knd-logo.png'
    ];
    
    criticalResources.forEach(resource => {
        const link = document.createElement('link');
        link.rel = 'preload';
        link.href = resource;
        link.as = resource.endsWith('.css') ? 'style' : resource.endsWith('.js') ? 'script' : 'image';
        document.head.appendChild(link);
    });
}

// Función para optimizar rendimiento
function optimizePerformance() {
    // Reducir repaints
    const style = document.createElement('style');
    style.textContent = `
        .optimize-repaint {
            will-change: transform;
            transform: translateZ(0);
        }
    `;
    document.head.appendChild(style);
    
    // Aplicar optimización a elementos animados
    const animatedElements = document.querySelectorAll('.btn, .card, .feature-card, .product-card');
    animatedElements.forEach(el => el.classList.add('optimize-repaint'));
}

// Inicialización optimizada
document.addEventListener('DOMContentLoaded', () => {
    // Precargar recursos críticos
    preloadCriticalResources();
    
    // Inicializar componentes
    initScrollAnimations();
    initContactForm();
    initColorPanel();
    initFAQ();
    initProductSearch();
    optimizeImages();
    optimizePerformance();
    loadSavedTheme();
    
    // Event listeners optimizados
    window.addEventListener('scroll', () => {
        requestAnimationFrame(revealOnScroll);
    });
    
    // Optimizar resize
    let resizeTimeout;
    window.addEventListener('resize', () => {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(() => {
            // Recalcular posiciones si es necesario
        }, 250);
    });
});

// Función para limpiar recursos cuando se oculta la página
document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
        // Pausar animaciones costosas
        const particles = document.querySelector('#particles-bg');
        if (particles) {
            particles.style.animationPlayState = 'paused';
        }
    } else {
        // Reanudar animaciones
        const particles = document.querySelector('#particles-bg');
        if (particles) {
            particles.style.animationPlayState = 'running';
        }
    }
});

// Exportar funciones para uso global
window.KNDStore = {
    showAlert,
    applyColorTheme,
    validateField,
    initContactForm,
    initFAQ,
    initProductSearch
}; 