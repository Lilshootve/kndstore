// Font Awesome Fix - KND Store
(function() {
    'use strict';
    
    // Funci√≥n para verificar si Font Awesome est√° cargado
    function isFontAwesomeLoaded() {
        const testElement = document.createElement('i');
        testElement.className = 'fas fa-rocket';
        testElement.style.position = 'absolute';
        testElement.style.left = '-9999px';
        testElement.style.fontSize = '1px';
        document.body.appendChild(testElement);
        
        const computedStyle = window.getComputedStyle(testElement, '::before');
        const content = computedStyle.getPropertyValue('content');
        
        document.body.removeChild(testElement);
        
        return content && content !== 'none' && content !== 'normal';
    }
    
    // Funci√≥n para cargar Font Awesome manualmente
    function loadFontAwesome() {
        const cdnUrls = [
            'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css',
            'https://use.fontawesome.com/releases/v6.4.0/css/all.css',
            'https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.4.0/css/all.min.css'
        ];
        
        let loaded = false;
        
        function tryLoadCDN(index) {
            if (index >= cdnUrls.length || loaded) return;
            
            const link = document.createElement('link');
            link.rel = 'stylesheet';
            link.href = cdnUrls[index];
            
            link.onload = function() {
                loaded = true;
                console.log('Font Awesome cargado desde:', cdnUrls[index]);
                setTimeout(checkAndFixIcons, 1000);
            };
            
            link.onerror = function() {
                console.warn('Fall√≥ CDN:', cdnUrls[index]);
                tryLoadCDN(index + 1);
            };
            
            document.head.appendChild(link);
        }
        
        tryLoadCDN(0);
    }
    
    // Funci√≥n para verificar y arreglar iconos
    function checkAndFixIcons() {
        const icons = document.querySelectorAll('.fas, .fab, .far, .fa');
        
        icons.forEach(icon => {
            const computedStyle = window.getComputedStyle(icon, '::before');
            const content = computedStyle.getPropertyValue('content');
            
            if (!content || content === 'none' || content === 'normal') {
                // Aplicar fallback visual
                icon.style.fontFamily = 'monospace';
                icon.style.fontSize = '1.2em';
                icon.style.color = 'var(--knd-neon-blue)';
                
                // Agregar texto alternativo
                const iconName = icon.className.match(/fa-(\w+)/);
                if (iconName) {
                    icon.setAttribute('title', iconName[1]);
                    const fallbackText = getFallbackText(iconName[1]);
                    icon.textContent = fallbackText;
                }
            }
        });
    }
    
    // Funci√≥n para agregar fallbacks visuales
    function addVisualFallbacks() {
        const categoryIcons = document.querySelectorAll('.category-icon i');
        
        categoryIcons.forEach(icon => {
            const iconName = icon.className.match(/fa-(\w+)/);
            if (iconName) {
                const fallbackText = getFallbackText(iconName[1]);
                icon.setAttribute('data-fallback', fallbackText);
            }
        });
    }
    
    // Funci√≥n para obtener texto de fallback
    function getFallbackText(iconName) {
        const fallbacks = {
            'rocket': 'üöÄ',
            'gamepad': 'üéÆ',
            'headset': 'üéß',
            'code': 'üíª',
            'microchip': 'üîß',
            'search': 'üîç',
            'eye': 'üëÅÔ∏è',
            'envelope': 'üìß',
            'phone': 'üìû',
            'clock': '‚è∞',
            'palette': 'üé®',
            'magic': '‚ú®',
            'brain': 'üß†',
            'credit-card': 'üí≥',
            'coins': 'ü™ô',
            'tools': 'üîß',
            'shopping-cart': 'üõí',
            'user-astronaut': 'üë®‚ÄçüöÄ',
            'crown': 'üëë',
            'home': 'üè†',
            'info-circle': '‚ÑπÔ∏è',
            'shipping-fast': 'üöö',
            'shield-alt': 'üõ°Ô∏è',
            'check-circle': '‚úÖ',
            'cogs': '‚öôÔ∏è',
            'globe': 'üåç',
            'paper-plane': 'üìÆ',
            'exclamation-triangle': '‚ö†Ô∏è',
            'undo': '‚Ü©Ô∏è',
            'copyright': '¬©Ô∏è',
            'file-contract': 'üìÑ',
            'database': 'üóÑÔ∏è',
            'lock': 'üîí',
            'cookie-bite': 'üç™',
            'share-alt': 'üì§',
            'user-shield': 'üë§üõ°Ô∏è',
            'user-check': 'üë§‚úÖ',
            'edit': '‚úèÔ∏è',
            'satellite': 'üõ∞Ô∏è',
            'broadcast-tower': 'üì°',
            'bullseye': 'üéØ',
            'comments': 'üí¨',
            'robot': 'ü§ñ',
            'dice': 'üé≤',
            'crystal-ball': 'üîÆ',
            'question-circle': '‚ùì',
            'vial': 'üß™',
            'list': 'üìã',
            'download': '‚¨áÔ∏è',
            'arrow-left': '‚Üê',
            'sign-in-alt': '‚û°Ô∏è',
            'user-plus': 'üë§+'
        };
        
        return fallbacks[iconName] || '‚ñ°';
    }
    
    // Funci√≥n para aplicar fallbacks visuales
    function applyVisualFallbacks() {
        const icons = document.querySelectorAll('.fas, .fab, .far, .fa');
        
        icons.forEach(icon => {
            const computedStyle = window.getComputedStyle(icon, '::before');
            const content = computedStyle.getPropertyValue('content');
            
            if (!content || content === 'none' || content === 'normal') {
                const iconName = icon.className.match(/fa-(\w+)/);
                if (iconName) {
                    const fallbackText = getFallbackText(iconName[1]);
                    icon.textContent = fallbackText;
                    icon.style.fontFamily = 'monospace';
                    icon.style.fontSize = '1.2em';
                }
            }
        });
    }
    
    // Funci√≥n para agregar clase de fallback al body si es necesario
    function addFallbackClass() {
        if (!isFontAwesomeLoaded()) {
            document.body.classList.add('fontawesome-fallback');
        }
    }
    
    // Funci√≥n principal de inicializaci√≥n
    function init() {
        console.log('Font Awesome Fix iniciado');
        
        // Verificar si Font Awesome est√° cargado
        if (!isFontAwesomeLoaded()) {
            console.warn('Font Awesome no detectado, cargando...');
            loadFontAwesome();
            addFallbackClass();
        } else {
            console.log('Font Awesome detectado correctamente');
            setTimeout(checkAndFixIcons, 1000);
        }
        
        // Agregar fallbacks visuales
        addVisualFallbacks();
        
        // Aplicar fallbacks despu√©s de un delay
        setTimeout(applyVisualFallbacks, 2000);
        
        // Verificar peri√≥dicamente
        setInterval(checkAndFixIcons, 5000);
    }
    
    // Inicializar cuando el DOM est√© listo
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }
    
    // Tambi√©n verificar cuando la ventana se carga completamente
    window.addEventListener('load', function() {
        setTimeout(checkAndFixIcons, 1000);
        setTimeout(addFallbackClass, 1000);
    });
    
})(); 